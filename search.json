[{"title":"Spring5 框架学习（一）","url":"/2021/05/25/Spring5-%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<h1 id=\"一、Spring-概述\"><a href=\"#一、Spring-概述\" class=\"headerlink\" title=\"一、Spring 概述\"></a>一、Spring 概述</h1><h2 id=\"1-Spring-是什么\"><a href=\"#1-Spring-是什么\" class=\"headerlink\" title=\"1. Spring 是什么\"></a>1. Spring 是什么</h2><p>   Spring 是轻量级的开源的 JavaEE 框架</p>\n<h2 id=\"2-Spring-出现的目的\"><a href=\"#2-Spring-出现的目的\" class=\"headerlink\" title=\"2. Spring 出现的目的\"></a>2. Spring 出现的目的</h2><p>   Spring 可以解决企业应用开发的复杂性</p>\n<h2 id=\"3-Spring-的两个核心\"><a href=\"#3-Spring-的两个核心\" class=\"headerlink\" title=\"3. Spring 的两个核心\"></a>3. Spring 的两个核心</h2><p>   （1）IOC：控制反转，把创建对象过程交给 Spring 进行管理</p>\n<p>   （2）Aop：面向切面，不修改源代码进行功能增强</p>\n<h2 id=\"4-Spring-的特点\"><a href=\"#4-Spring-的特点\" class=\"headerlink\" title=\"4. Spring 的特点\"></a>4. Spring 的特点</h2><p>   （1）方便解耦，简化开发</p>\n<p>   （2）Aop 编程支持</p>\n<p>   （3）方便程序测试</p>\n<p>   （4）方便和其他框架进行整合</p>\n<p>   （5）方便进行事务操作</p>\n<p>   （6）降低 API 开发难度</p>\n<h1 id=\"二、Spring-使用\"><a href=\"#二、Spring-使用\" class=\"headerlink\" title=\"二、Spring 使用\"></a>二、Spring 使用</h1><h2 id=\"1-下载Spring-5最新稳定版\"><a href=\"#1-下载Spring-5最新稳定版\" class=\"headerlink\" title=\"1. 下载Spring 5最新稳定版\"></a>1. 下载Spring 5最新稳定版</h2><p>   <a href=\"https://repo.spring.io/release/org/springframework/spring/\">下载地址</a></p>\n<p>   <img src=\"https://cdn.jsdelivr.net/gh/xiaocaixiang/image/img/20210527174815.png\"></p>\n<p>   <img src=\"https://cdn.jsdelivr.net/gh/xiaocaixiang/image/img/20210527174716.png\"></p>\n<p>   <img src=\"https://cdn.jsdelivr.net/gh/xiaocaixiang/image/img/20210527175051.png\"></p>\n<h2 id=\"2-创建普通-Java工程\"><a href=\"#2-创建普通-Java工程\" class=\"headerlink\" title=\"2. 创建普通 Java工程\"></a>2. 创建普通 Java工程</h2><p>   <img src=\"https://cdn.jsdelivr.net/gh/xiaocaixiang/image/img/20210527175538.png\"></p>\n<h2 id=\"3-导入Spring5-相关jar包\"><a href=\"#3-导入Spring5-相关jar包\" class=\"headerlink\" title=\"3. 导入Spring5 相关jar包\"></a>3. 导入Spring5 相关jar包</h2><p>   除了需要导入Spring\\libs下所需的4个jar包外，还需要导入commons-logging日志包</p>\n<p>   <img src=\"https://cdn.jsdelivr.net/gh/xiaocaixiang/image/img/20210527180519.png\"></p>\n<h2 id=\"4-创建普通类\"><a href=\"#4-创建普通类\" class=\"headerlink\" title=\"4. 创建普通类\"></a>4. 创建普通类</h2><p>   <img src=\"https://cdn.jsdelivr.net/gh/xiaocaixiang/image/img/20210527182328.png\"></p>\n<h2 id=\"5-创建-Spring-配置文件\"><a href=\"#5-创建-Spring-配置文件\" class=\"headerlink\" title=\"5.创建 Spring 配置文件\"></a>5.创建 Spring 配置文件</h2><p>   Spring 配置文件使用xml格式</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaocaixiang/image/img/20210527182225.png\"></p>\n<h2 id=\"6-进行测试代码编写\"><a href=\"#6-进行测试代码编写\" class=\"headerlink\" title=\"6.进行测试代码编写\"></a>6.进行测试代码编写</h2><p><img src=\"https://cdn.jsdelivr.net/gh/xiaocaixiang/image/img/20210527182940.png\"></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ul>\n<li><a href=\"https://www.bilibili.com/video/BV1Vf4y127N5?p=19&t=201\">尚硅谷-Spring5框架最新版教程（idea版）</a></li>\n</ul>\n","categories":["Spring"],"tags":["Spring5","下载使用"]},{"title":"Spring5 框架学习（三）","url":"/2021/05/31/Spring5-%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/","content":"<h1 id=\"一、AOP简介\"><a href=\"#一、AOP简介\" class=\"headerlink\" title=\"一、AOP简介\"></a>一、AOP简介</h1><h2 id=\"1-什么是AOP（面向切面编程）\"><a href=\"#1-什么是AOP（面向切面编程）\" class=\"headerlink\" title=\"1. 什么是AOP（面向切面编程）\"></a>1. 什么是AOP（面向切面编程）</h2><p>​    AOP 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。通俗的讲：不通过修改源代码方式，在主干功能里面添加新功能。</p>\n<h2 id=\"2-IOC底层原理（动态代理）\"><a href=\"#2-IOC底层原理（动态代理）\" class=\"headerlink\" title=\"2. IOC底层原理（动态代理）\"></a>2. IOC底层原理（动态代理）</h2><ul>\n<li><p>有接口情况，使用 JDK 动态代理。创建接口实现类代理对象，增强类的方法</p>\n</li>\n<li><p>没有接口情况，使用 CGLIB 动态代理。创建子类的代理对象，增强类的方法</p>\n</li>\n</ul>\n<h1 id=\"二、JDK-动态代理\"><a href=\"#二、JDK-动态代理\" class=\"headerlink\" title=\"二、JDK 动态代理\"></a>二、JDK 动态代理</h1><p>​    使用java.long.reflect.Proxy 类里面的newProxyInstance 方法创建代理对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">newProxyInstance</span><span class=\"params\">(ClassLoader loader, // 类加载器</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                      Class&lt;?&gt;[] interfaces, // 增强方法所在的类，这个类实现的接口，支持多个接口</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                      InvocationHandler h // 实现这个接口InvocationHandler，创建代理对象，写增强的部分)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n\n<p>​    编写 JDK 动态代理代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//（1）创建接口，定义方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">update</span><span class=\"params\">(String id)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//（2）创建接口实现类，实现方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">update</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//（3）使用 Proxy 类创建接口代理对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JDKProxy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建接口实现类代理对象</span></span><br><span class=\"line\">        Class[] interfaces = &#123;UserDao.class&#125;;</span><br><span class=\"line\">        UserDaoImpl userDao = <span class=\"keyword\">new</span> UserDaoImpl(); </span><br><span class=\"line\">        UserDao dao =(UserDao)Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces,<span class=\"keyword\">new</span> UserDaoProxy(userDao));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = dao.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;result:&quot;</span>+result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建代理对象代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDaoProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1 把创建的是谁的代理对象，把谁传递过来</span></span><br><span class=\"line\">    <span class=\"comment\">//有参数构造传递</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object obj;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserDaoProxy</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.obj = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//增强的逻辑</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//方法之前</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;方法之前执行....&quot;</span>+method.getName()+<span class=\"string\">&quot; :传递的参数...&quot;</span>+ Arrays.toString(args));</span><br><span class=\"line\">        <span class=\"comment\">//被增强的方法执行</span></span><br><span class=\"line\">        Object res = method.invoke(obj, args);</span><br><span class=\"line\">        <span class=\"comment\">//方法之后</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;方法之后执行....&quot;</span>+obj);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、AOP术语、操作\"><a href=\"#三、AOP术语、操作\" class=\"headerlink\" title=\"三、AOP术语、操作\"></a>三、AOP术语、操作</h1><h2 id=\"1-术语\"><a href=\"#1-术语\" class=\"headerlink\" title=\"1. 术语\"></a>1. 术语</h2><p>a）连接点：类里面哪些方法可以被增强，这些方法称为连接点</p>\n<p>b）切入点：实际被真正增强的方法称为切入点</p>\n<p>c）通知（增强）：实际增强的逻辑部分称为通知，且分为以下五种类型：</p>\n<p>​      1）前置通知 2）后置通知 3）环绕通知 4）异常通知 5）最终通知</p>\n<p>d）切面：把通知应用到切入点过程</p>\n<h2 id=\"2-操作\"><a href=\"#2-操作\" class=\"headerlink\" title=\"2. 操作\"></a>2. 操作</h2><p> a）Spring 框架一般都是基于 AspectJ 实现 AOP 操作，AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把AspectJ 和 Spirng 框架一起使用，进行 AOP 操作。</p>\n<p> b）基于 AspectJ 实现 AOP 操作：1）基于 xml 配置文件实现     2）基于注解方式实现</p>\n<p> c）AOP相关依赖：</p>\n<p>​    <img src=\"https://cdn.jsdelivr.net/gh/xiaocaixiang/image/img/20210531160831.png\"></p>\n<p> d）切入点表达式，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">（<span class=\"number\">1</span>）切入点表达式作用：知道对哪个类里面的哪个方法进行增强 </span><br><span class=\"line\">（<span class=\"number\">2</span>）语法结构： execution([权限修饰符] [返回类型] [类全路径] [方法名称]([参数列表]) )</span><br><span class=\"line\">（<span class=\"number\">3</span>）例子如下：</span><br><span class=\"line\">    例 <span class=\"number\">1</span>：对com.spring.demo.demo02.BookDao 类里面的 add 进行增强</span><br><span class=\"line\">\t\texecution(* com.spring.demo.demo02.add(..))</span><br><span class=\"line\"> \t例 <span class=\"number\">2</span>：对 com.spring.demo.demo02.BookDao 类里面的所有的方法进行增强</span><br><span class=\"line\">\t\texecution(* com.spring.demo.demo02.BookDao.* (..))</span><br><span class=\"line\">    例 <span class=\"number\">3</span>：对 com.spring.demo.demo02.dao 包里面所有类，类里面所有方法进行增强</span><br><span class=\"line\">\t\texecution(* com.spring.demo.demo02.dao.*.* (..))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四、基于注解方式实现AOP-操作\"><a href=\"#四、基于注解方式实现AOP-操作\" class=\"headerlink\" title=\"四、基于注解方式实现AOP 操作\"></a>四、基于注解方式实现AOP 操作</h1><h2 id=\"1-创建类，定义方法\"><a href=\"#1-创建类，定义方法\" class=\"headerlink\" title=\"1. 创建类，定义方法\"></a>1. 创建类，定义方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> System.out.println(<span class=\"string\">&quot;add.......&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-创建增强类，编写增强逻辑\"><a href=\"#2-创建增强类，编写增强逻辑\" class=\"headerlink\" title=\"2. 创建增强类，编写增强逻辑\"></a>2. 创建增强类，编写增强逻辑</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在增强类里面，创建方法，让不同方法代表不同通知类型</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserProxy</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//前置通知</span></span><br><span class=\"line\"> System.out.println(<span class=\"string\">&quot;before......&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-进行通知的配置\"><a href=\"#3-进行通知的配置\" class=\"headerlink\" title=\"3. 进行通知的配置\"></a>3. 进行通知的配置</h2><p>a）在Spring配置文件开启注解扫描，开启生成代理对象</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/aop&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                           http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                           http://www.springframework.org/schema/context </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                           http://www.springframework.org/schema/context/spring-context.xsd </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                           http://www.springframework.org/schema/aop </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                           http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 开启注解扫描 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base</span>\u0002<span class=\"attr\">package</span>=<span class=\"string\">&quot;com.spring.demo.demo02&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 开启Aspect生成代理对象--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>b）使用注解创建对象，在增强类上面添加注解 @Aspect</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//增强的类</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span>  <span class=\"comment\">//生成代理对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserProxy</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//被增强的类</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-配置不同类型的通知\"><a href=\"#4-配置不同类型的通知\" class=\"headerlink\" title=\"4. 配置不同类型的通知\"></a>4. 配置不同类型的通知</h2><p>​    在增强类的里面，在作为通知方法上面添加通知类型注解，使用切入点表达式配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//增强的类</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span> <span class=\"comment\">//生成代理对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserProxy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//前置通知</span></span><br><span class=\"line\">    <span class=\"comment\">//@Before 注解表示作为前置通知</span></span><br><span class=\"line\">    <span class=\"meta\">@Before(value = &quot;execution(* com.spring.demo.demo02.User.add(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;before.........&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//后置通知（返回通知）</span></span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning(value = &quot;execution(* com.spring.demo.demo02.User.add(..))&quot;)</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterReturning</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;afterReturning.........&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//最终通知</span></span><br><span class=\"line\">    <span class=\"meta\">@After(value = &quot;execution(* com.spring.demo.demo02.User.add(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;after.........&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//异常通知</span></span><br><span class=\"line\">    <span class=\"meta\">@AfterThrowing(value = &quot;execution(* com.spring.demo.demo02.User.add(..))&quot;)</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterThrowing</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;afterThrowing.........&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//环绕通知</span></span><br><span class=\"line\">    <span class=\"meta\">@Around(value = &quot;execution(* com.spring.demo.demo02.User.add(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">around</span><span class=\"params\">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class=\"keyword\">throws</span> </span></span><br><span class=\"line\"><span class=\"function\">        Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;环绕之前.........&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//被增强的方法执行</span></span><br><span class=\"line\">        proceedingJoinPoint.proceed();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;环绕之后.........&quot;</span>);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-相同的切入点抽取\"><a href=\"#5-相同的切入点抽取\" class=\"headerlink\" title=\"5. 相同的切入点抽取\"></a>5. 相同的切入点抽取</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//相同切入点抽取</span></span><br><span class=\"line\"><span class=\"meta\">@Pointcut(value = &quot;execution(* com.spring.demo.demo02.User.add(..))&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pointdemo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//前置通知</span></span><br><span class=\"line\"><span class=\"comment\">//@Before 注解表示作为前置通知</span></span><br><span class=\"line\"><span class=\"meta\">@Before(value = &quot;pointdemo()&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;before.........&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-设置增强类优先级\"><a href=\"#6-设置增强类优先级\" class=\"headerlink\" title=\"6. 设置增强类优先级\"></a>6. 设置增强类优先级</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 有多个增强类多同一个方法进行增强，在增强类上面添加注解 @Order(数值)，数字类型值越小优先级越高</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Order(1)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonProxy</span></span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-完全使用注解开发\"><a href=\"#7-完全使用注解开发\" class=\"headerlink\" title=\"7. 完全使用注解开发\"></a>7. 完全使用注解开发</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建配置类，不需要创建 xml 配置文件 </span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(basePackages = &#123;&quot;com.spring.demo&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConfigAop</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五、基于XML配置文件实现AOP-操作\"><a href=\"#五、基于XML配置文件实现AOP-操作\" class=\"headerlink\" title=\"五、基于XML配置文件实现AOP 操作\"></a>五、基于XML配置文件实现AOP 操作</h1><p>​    了解即可，重点掌握基于注解的方式。</p>\n<h2 id=\"1-创建增强类、被增强类、方法\"><a href=\"#1-创建增强类、被增强类、方法\" class=\"headerlink\" title=\"1. 创建增强类、被增强类、方法\"></a>1. 创建增强类、被增强类、方法</h2><p>​    略</p>\n<h2 id=\"2-在-Spring-配置文件中创建对象\"><a href=\"#2-在-Spring-配置文件中创建对象\" class=\"headerlink\" title=\"2 在 Spring 配置文件中创建对象\"></a>2 在 Spring 配置文件中创建对象</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--创建对象--&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;book&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo02.Book&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bookProxy&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo02.BookProxy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-在-Spring-配置文件中配置切入点\"><a href=\"#3-在-Spring-配置文件中配置切入点\" class=\"headerlink\" title=\"3. 在 Spring 配置文件中配置切入点\"></a>3. 在 Spring 配置文件中配置切入点</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置 aop 增强--&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--切入点--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* com.spring.demo.demo02.Book.buy(..))&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--配置切面--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;bookProxy&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--增强作用在具体的方法上--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;before&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;p&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ul>\n<li><p><a href=\"https://www.bilibili.com/video/BV1Vf4y127N5?p=19&t=201\">尚硅谷-Spring5框架最新版教程（idea版）</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/weixin_45496190\">来点淦货的CSDN博客</a></p>\n</li>\n</ul>\n","categories":["Spring"],"tags":["Spring5","AOP","动态代理"]},{"title":"博客搭建——Hexo","url":"/2021/05/07/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E2%80%94hexo/","content":"<h1 id=\"前置\"><a href=\"#前置\" class=\"headerlink\" title=\"前置\"></a>前置</h1><ol>\n<li><p>安装Node.js</p>\n<p>首先需要在本地安装Node.js，可以去<a href=\"https://nodejs.org/zh-cn/\">官网</a>下载，安装好之后会有Node.js和npm包管理器。可以使用<code>node -v</code>和<code>npm -v</code>验证安装。</p>\n<p>使用npm指向淘宝源安装cnpm，以加快包安装速度。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ol start=\"2\">\n<li><p>安装hexo</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>可以使用<code>hexo -v</code>验证安装</p>\n</li>\n</ol>\n<h1 id=\"搭建博客\"><a href=\"#搭建博客\" class=\"headerlink\" title=\"搭建博客\"></a>搭建博客</h1><ol>\n<li><p>初始化博客</p>\n<p>新建一个目录作为站点，在该目录下初始化。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure></li>\n<li><p>启动博客</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p>本地访问地址：<a href=\"http://localhost:4000/\">http://localhost:4000/</a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaocaixiang/image/img/hexo.jpg\"></p>\n</li>\n<li><p>新建博文</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo n &quot;第一篇博客文章&quot;</span><br></pre></td></tr></table></figure>\n\n<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n\n<p>生成静态文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n\n<p>启动查看。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaocaixiang/image/img/20210507194715.png\"></p>\n</li>\n</ol>\n<h1 id=\"部署到GitHub\"><a href=\"#部署到GitHub\" class=\"headerlink\" title=\"部署到GitHub\"></a>部署到GitHub</h1><ol>\n<li><p>在GitHub新建一个仓库，仓库名为 <code>用户名.github.io</code>（也是部署成果后的访问地址）</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaocaixiang/image/img/20210507201500.png\"></p>\n</li>\n<li><p>安装git插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>\n<li><p>配置站点 <code>_config.yml</code>文件的 <code>deploy </code>参数，repo使用https或ssh均可</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  \t<span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"> \t<span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/YourGithubName(自行替换)/YourGithubName(自行替换).github.io.git</span></span><br><span class=\"line\"> \t<span class=\"comment\"># repo: git@github.com:YourGithubName(自行替换)/YourGithubName(自行替换).github.io.git</span></span><br><span class=\"line\">  \t<span class=\"attr\">branch:</span> <span class=\"string\">main</span></span><br></pre></td></tr></table></figure></li>\n<li><p>部署到Github仓库（使用https第一次推送需要输入账号密码）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></li>\n<li><p>访问博客</p>\n<p>访问<a href=\"https://yourgithubname.github.io/%EF%BC%88%E8%87%AA%E8%A1%8C%E6%9B%BF%E6%8D%A2%EF%BC%89%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E5%8D%9A%E5%AE%A2%E3%80%82\">https://YourGithubName.github.io/（自行替换）可以查看博客。</a></p>\n<p>这里的访问地址是<a href=\"http://xiaocaixiang.github.io/%E3%80%82\">http://xiaocaixiang.github.io/。</a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaocaixiang/image/img/20210507202000.png\"></p>\n</li>\n</ol>\n<h1 id=\"更改主题\"><a href=\"#更改主题\" class=\"headerlink\" title=\"更改主题\"></a>更改主题</h1><ol>\n<li><p>下载主题到本地 <code>themes</code>文件夹，这里的主题使用<a href=\"http://theme-next.iissnan.com/\">Next</a>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure></li>\n<li><p>启用主题</p>\n<p>修改站点 <code>_config.yml </code>文件的<code>theme</code>项。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure></li>\n<li><p>清理、生成、部署后访问博客</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaocaixiang/image/img/20210507202848.png\"></p>\n</li>\n</ol>\n<h1 id=\"搭建图床（Github-PicGo-jsDelivr-CDN）\"><a href=\"#搭建图床（Github-PicGo-jsDelivr-CDN）\" class=\"headerlink\" title=\"搭建图床（Github+PicGo+jsDelivr CDN）\"></a>搭建图床（Github+PicGo+jsDelivr CDN）</h1><ol>\n<li><p>在GitHub新建一个public仓库</p>\n</li>\n<li><p>在个人页选择开发者设置</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaocaixiang/image/img/setting.jpg\"></p>\n</li>\n<li><p>新建个人密钥</p>\n<p>名称随意，勾选repo后新建。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaocaixiang/image/img/generate2.jpg\"></p>\n<p>成功新建后复制tokens</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaocaixiang/image/img/20210507211444.png\"></p>\n</li>\n<li><p>设置图床</p>\n<p>下载并打开<a href=\"https://github.com/Molunerfinn/PicGo\">PicGO</a>。</p>\n<p>设置GitHub图床，填写仓库名、分支名、token。</p>\n<p>设置自定义域名以实现访问加速，使用<strong><a href=\"https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D\">https://cdn.jsdelivr.net/gh/用户名/仓库名</a></strong>实现jsDelivrCDN访问加速。</p>\n<p>确定后即可上传图片使用图床。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaocaixiang/image/img/20210507204410.png\"></p>\n</li>\n</ol>\n<h1 id=\"Next主题美化\"><a href=\"#Next主题美化\" class=\"headerlink\" title=\"Next主题美化\"></a>Next主题美化</h1><ol>\n<li><p>增加标签页和分类页</p>\n<p>修改<code>themes\\next</code>文件夹下的<code>_config.yml</code>文件，设置<strong>menu</strong>项。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).</span></span><br><span class=\"line\"><span class=\"comment\"># Usage: `Key: /link/ || icon`</span></span><br><span class=\"line\"><span class=\"comment\"># Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is case-senstive.</span></span><br><span class=\"line\"><span class=\"comment\"># Value before `||` delimeter is the target link.</span></span><br><span class=\"line\"><span class=\"comment\"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/||</span> <span class=\"string\">home</span></span><br><span class=\"line\">  <span class=\"comment\">#about: /about/|| user</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/||</span> <span class=\"string\">tags</span>  <span class=\"comment\"># 打开标签</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories/||</span> <span class=\"string\">th</span>  <span class=\"comment\"># 打开分类</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/||</span> <span class=\"string\">archive</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule: /schedule/|| calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml|| sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/|| heartbeat</span></span><br></pre></td></tr></table></figure>\n\n<p>新建<strong>tags</strong>和<strong>categories</strong>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo n page tags</span><br><span class=\"line\">hexo n page categories</span><br></pre></td></tr></table></figure>\n\n<p>修改<strong>source\\categories\\index.md文件。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 分类</span><br><span class=\"line\">date: 2021-05-05 23:41:09</span><br><span class=\"line\">type: &quot;categories&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>修改<strong>source\\tags\\index.md文件。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: 2021-05-05 23:41:09</span><br><span class=\"line\">type: &quot;tags&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>头像设置</p>\n<p>修改<code>themes\\next</code>文件夹下的<code>_config.yml</code>文件，设置<strong>avatar</strong>以更改头像。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Sidebar Avatar</span></span><br><span class=\"line\"><span class=\"comment\"># in theme directory(source/images): /images/avatar.gif</span></span><br><span class=\"line\"><span class=\"comment\"># in site  directory(source/uploads): /uploads/avatar.gif</span></span><br><span class=\"line\"><span class=\"comment\">#avatar: /images/avatar.gif</span></span><br><span class=\"line\"><span class=\"attr\">avatar:</span> <span class=\"string\">/images/xiaocaixiang.jpg</span></span><br></pre></td></tr></table></figure>\n\n<p>修改<code>themes\\next\\source\\css\\_common\\components\\sidebar</code>文件夹的<code>sidebar-author.styl</code>文件中添加</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.site-author-image</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">360deg</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在**.site-author-image**中添加，实现头像圆形并可以在鼠标移过时旋转。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\"><span class=\"attribute\">transition</span>: <span class=\"number\">1s</span> all;</span><br></pre></td></tr></table></figure></li>\n<li><p>增加搜索功能</p>\n<p>在博客目录下执行,安装 <code>hexo-generator-searchdb</code>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cnpm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n\n<p>编辑站点 <code>_config.yml</code>文件，新增以下内容到任意位置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"attr\">format:</span> <span class=\"string\">html</span></span><br><span class=\"line\">  <span class=\"attr\">limit:</span> <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n\n<p>编辑站点 <code>_config.yml</code>文件，启用本地搜索功能：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Local search</span></span><br><span class=\"line\"><span class=\"attr\">local_search:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n<li><p>增加不蒜子功能</p>\n<p>编辑站点 <code>_config.yml</code>文件中的<code>busuanzi_count</code>的配置项。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Show PV/UV of the website/page with busuanzi.</span></span><br><span class=\"line\"><span class=\"comment\"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class=\"line\"><span class=\"attr\">busuanzi_count:</span></span><br><span class=\"line\">  <span class=\"comment\"># count values only if the other configs are false</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># custom uv span for the whole site</span></span><br><span class=\"line\">  <span class=\"attr\">site_uv:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">site_uv_header:</span> <span class=\"string\">本站访问数</span></span><br><span class=\"line\">  <span class=\"attr\">site_uv_footer:</span> <span class=\"string\">人次</span></span><br><span class=\"line\">  <span class=\"comment\"># custom pv span for the whole site</span></span><br><span class=\"line\">  <span class=\"attr\">site_pv:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">site_pv_header:</span> <span class=\"string\">本站总访问量</span></span><br><span class=\"line\">  <span class=\"attr\">site_pv_footer:</span> <span class=\"string\">次</span></span><br><span class=\"line\">  <span class=\"comment\"># custom pv span for one page only</span></span><br><span class=\"line\">  <span class=\"attr\">page_pv:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">page_pv_header:</span> <span class=\"string\">本文总阅读量</span></span><br><span class=\"line\">  <span class=\"attr\">page_pv_footer:</span> <span class=\"string\">次</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>增加每日一言</p>\n<p>在<code>themes\\next\\layout\\_partials</code>目录的<code>header.swig</code>文件中添加:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hitokoto&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;text-align:center&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hitokoto_text&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span>——<span class=\"tag\">&lt;<span class=\"name\">b</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;from&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  fetch(<span class=\"string\">&#x27;https://v1.hitokoto.cn?c=a&amp;c=b&amp;c=c&amp;c=d&amp;c=h&amp;c=l&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</span></span><br><span class=\"line\"><span class=\"javascript\">    .then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> hitokoto = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;hitokoto_text&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">      hitokoto.href = <span class=\"string\">&#x27;https://hitokoto.cn/?uuid=&#x27;</span> + data.uuid</span></span><br><span class=\"line\">      hitokoto.innerText = data.hitokoto</span><br><span class=\"line\"><span class=\"javascript\">\t  <span class=\"keyword\">const</span> <span class=\"keyword\">from</span> = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;from&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">from</span>.innerText = data.from</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"javascript\">    .catch(<span class=\"built_in\">console</span>.error)</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>除了上述提到外，还做了一些零散修改，不再赘述，效果如<a href=\"https://xiaocaixiang.github.io/\">本博客</a>所见</p>\n</li>\n</ol>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ul>\n<li><p><a href=\"https://www.bilibili.com/video/BV1Yb411a7ty?from=search&seid=964351852428769920\">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo</a></p>\n</li>\n<li><p><a href=\"https://www.bilibili.com/video/BV1JA411h7Gw?from=search&seid=5758126091989239952\">8分钟让你快速掌握Markdown</a></p>\n</li>\n<li><p><a href=\"https://www.bilibili.com/video/BV16W411t7mq?p=1\">[馨客栈分享]使用Hexo博客搭建的个人博客，使用Next主题来进行优化改造</a></p>\n</li>\n<li><p><a href=\"https://www.bilibili.com/video/BV1Ui4y1x7Cq?p=2&spm_id_from=pageDriver\">PicGo+Github图床的正确打开方式</a></p>\n</li>\n<li><p><a href=\"https://blog.zqxin.top/\">Xin’s Blog</a></p>\n</li>\n</ul>\n","categories":["博客"],"tags":["下载使用","Hexo","Next","PicGO","Github"]},{"title":"Spring5 框架学习（四）","url":"/2021/06/01/Spring5-%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/","content":"<h1 id=\"一、JdbcTemplate简介\"><a href=\"#一、JdbcTemplate简介\" class=\"headerlink\" title=\"一、JdbcTemplate简介\"></a>一、JdbcTemplate简介</h1><h2 id=\"1-什么是JdbcTemplate\"><a href=\"#1-什么是JdbcTemplate\" class=\"headerlink\" title=\"1. 什么是JdbcTemplate\"></a>1. 什么是JdbcTemplate</h2><p>​    Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作。</p>\n<h2 id=\"2-JdbcTemplate使用\"><a href=\"#2-JdbcTemplate使用\" class=\"headerlink\" title=\"2. JdbcTemplate使用\"></a>2. JdbcTemplate使用</h2><p>a）引入相关jar包</p>\n<p>​        druid：一个数据库连接池</p>\n<p>​        mysql-connector-java：java连接mysql数据库所需依赖</p>\n<p>​        spring-jdbc：spring对jdbc做的封装</p>\n<p>​        spring-tx：spring对事物的操作依赖</p>\n<p>​        spring-orm：spring整合其他框架，如mybatis所需的依赖</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/xiaocaixiang/image/img/20210531172535.png\"></p>\n<p>b）在 spring 配置文件配置数据库连接池</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 数据库连接池 --&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">                      <span class=\"attr\">destroy-method</span>=<span class=\"string\">&quot;close&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:mysql:///user_db&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;123456&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClassName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>c）配置 JdbcTemplate 对象，注入 DataSource</p>\n<p>d）创建 service 类，创建 dao 类，在 dao 注入 jdbcTemplate 对象.</p>\n<h1 id=\"二、JDK-动态代理\"><a href=\"#二、JDK-动态代理\" class=\"headerlink\" title=\"二、JDK 动态代理\"></a>二、JDK 动态代理</h1><p>​    使用java.long.reflect.Proxy 类里面的newProxyInstance 方法创建代理对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">newProxyInstance</span><span class=\"params\">(ClassLoader loader, // 类加载器</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                      Class&lt;?&gt;[] interfaces, // 增强方法所在的类，这个类实现的接口，支持多个接口</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                      InvocationHandler h // 实现这个接口InvocationHandler，创建代理对象，写增强的部分)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n\n<p>​    编写 JDK 动态代理代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//（1）创建接口，定义方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">update</span><span class=\"params\">(String id)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//（2）创建接口实现类，实现方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">update</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//（3）使用 Proxy 类创建接口代理对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JDKProxy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建接口实现类代理对象</span></span><br><span class=\"line\">        Class[] interfaces = &#123;UserDao.class&#125;;</span><br><span class=\"line\">        UserDaoImpl userDao = <span class=\"keyword\">new</span> UserDaoImpl(); </span><br><span class=\"line\">        UserDao dao =(UserDao)Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces,<span class=\"keyword\">new</span> UserDaoProxy(userDao));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = dao.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;result:&quot;</span>+result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建代理对象代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDaoProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1 把创建的是谁的代理对象，把谁传递过来</span></span><br><span class=\"line\">    <span class=\"comment\">//有参数构造传递</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object obj;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserDaoProxy</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.obj = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//增强的逻辑</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//方法之前</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;方法之前执行....&quot;</span>+method.getName()+<span class=\"string\">&quot; :传递的参数...&quot;</span>+ Arrays.toString(args));</span><br><span class=\"line\">        <span class=\"comment\">//被增强的方法执行</span></span><br><span class=\"line\">        Object res = method.invoke(obj, args);</span><br><span class=\"line\">        <span class=\"comment\">//方法之后</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;方法之后执行....&quot;</span>+obj);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、AOP术语、操作\"><a href=\"#三、AOP术语、操作\" class=\"headerlink\" title=\"三、AOP术语、操作\"></a>三、AOP术语、操作</h1><h2 id=\"1-术语\"><a href=\"#1-术语\" class=\"headerlink\" title=\"1. 术语\"></a>1. 术语</h2><p>a）连接点：类里面哪些方法可以被增强，这些方法称为连接点</p>\n<p>b）切入点：实际被真正增强的方法称为切入点</p>\n<p>c）通知（增强）：实际增强的逻辑部分称为通知，且分为以下五种类型：</p>\n<p>​      1）前置通知 2）后置通知 3）环绕通知 4）异常通知 5）最终通知</p>\n<p>d）切面：把通知应用到切入点过程</p>\n<h2 id=\"2-操作\"><a href=\"#2-操作\" class=\"headerlink\" title=\"2. 操作\"></a>2. 操作</h2><p> a）Spring 框架一般都是基于 AspectJ 实现 AOP 操作，AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把AspectJ 和 Spirng 框架一起使用，进行 AOP 操作。</p>\n<p> b）基于 AspectJ 实现 AOP 操作：1）基于 xml 配置文件实现     2）基于注解方式实现</p>\n<p> c）AOP相关依赖：</p>\n<p>​    <img src=\"https://cdn.jsdelivr.net/gh/xiaocaixiang/image/img/20210531160831.png\"></p>\n<p> d）切入点表达式，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">（<span class=\"number\">1</span>）切入点表达式作用：知道对哪个类里面的哪个方法进行增强 </span><br><span class=\"line\">（<span class=\"number\">2</span>）语法结构： execution([权限修饰符] [返回类型] [类全路径] [方法名称]([参数列表]) )</span><br><span class=\"line\">（<span class=\"number\">3</span>）例子如下：</span><br><span class=\"line\">    例 <span class=\"number\">1</span>：对com.spring.demo.demo02.BookDao 类里面的 add 进行增强</span><br><span class=\"line\">\t\texecution(* com.spring.demo.demo02.add(..))</span><br><span class=\"line\"> \t例 <span class=\"number\">2</span>：对 com.spring.demo.demo02.BookDao 类里面的所有的方法进行增强</span><br><span class=\"line\">\t\texecution(* com.spring.demo.demo02.BookDao.* (..))</span><br><span class=\"line\">    例 <span class=\"number\">3</span>：对 com.spring.demo.demo02.dao 包里面所有类，类里面所有方法进行增强</span><br><span class=\"line\">\t\texecution(* com.spring.demo.demo02.dao.*.* (..))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四、基于注解方式实现AOP-操作\"><a href=\"#四、基于注解方式实现AOP-操作\" class=\"headerlink\" title=\"四、基于注解方式实现AOP 操作\"></a>四、基于注解方式实现AOP 操作</h1><h2 id=\"1-创建类，定义方法\"><a href=\"#1-创建类，定义方法\" class=\"headerlink\" title=\"1. 创建类，定义方法\"></a>1. 创建类，定义方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> System.out.println(<span class=\"string\">&quot;add.......&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-创建增强类，编写增强逻辑\"><a href=\"#2-创建增强类，编写增强逻辑\" class=\"headerlink\" title=\"2. 创建增强类，编写增强逻辑\"></a>2. 创建增强类，编写增强逻辑</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在增强类里面，创建方法，让不同方法代表不同通知类型</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserProxy</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//前置通知</span></span><br><span class=\"line\"> System.out.println(<span class=\"string\">&quot;before......&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-进行通知的配置\"><a href=\"#3-进行通知的配置\" class=\"headerlink\" title=\"3. 进行通知的配置\"></a>3. 进行通知的配置</h2><p>a）在Spring配置文件开启注解扫描，开启生成代理对象</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/aop&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                           http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                           http://www.springframework.org/schema/context </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                           http://www.springframework.org/schema/context/spring-context.xsd </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                           http://www.springframework.org/schema/aop </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                           http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 开启注解扫描 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base</span>\u0002<span class=\"attr\">package</span>=<span class=\"string\">&quot;com.spring.demo.demo02&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 开启Aspect生成代理对象--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>b）使用注解创建对象，在增强类上面添加注解 @Aspect</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//增强的类</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span>  <span class=\"comment\">//生成代理对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserProxy</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//被增强的类</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-配置不同类型的通知\"><a href=\"#4-配置不同类型的通知\" class=\"headerlink\" title=\"4. 配置不同类型的通知\"></a>4. 配置不同类型的通知</h2><p>​    在增强类的里面，在作为通知方法上面添加通知类型注解，使用切入点表达式配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//增强的类</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span> <span class=\"comment\">//生成代理对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserProxy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//前置通知</span></span><br><span class=\"line\">    <span class=\"comment\">//@Before 注解表示作为前置通知</span></span><br><span class=\"line\">    <span class=\"meta\">@Before(value = &quot;execution(* com.spring.demo.demo02.User.add(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;before.........&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//后置通知（返回通知）</span></span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning(value = &quot;execution(* com.spring.demo.demo02.User.add(..))&quot;)</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterReturning</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;afterReturning.........&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//最终通知</span></span><br><span class=\"line\">    <span class=\"meta\">@After(value = &quot;execution(* com.spring.demo.demo02.User.add(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;after.........&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//异常通知</span></span><br><span class=\"line\">    <span class=\"meta\">@AfterThrowing(value = &quot;execution(* com.spring.demo.demo02.User.add(..))&quot;)</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterThrowing</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;afterThrowing.........&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//环绕通知</span></span><br><span class=\"line\">    <span class=\"meta\">@Around(value = &quot;execution(* com.spring.demo.demo02.User.add(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">around</span><span class=\"params\">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class=\"keyword\">throws</span> </span></span><br><span class=\"line\"><span class=\"function\">        Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;环绕之前.........&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//被增强的方法执行</span></span><br><span class=\"line\">        proceedingJoinPoint.proceed();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;环绕之后.........&quot;</span>);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-相同的切入点抽取\"><a href=\"#5-相同的切入点抽取\" class=\"headerlink\" title=\"5. 相同的切入点抽取\"></a>5. 相同的切入点抽取</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//相同切入点抽取</span></span><br><span class=\"line\"><span class=\"meta\">@Pointcut(value = &quot;execution(* com.spring.demo.demo02.User.add(..))&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pointdemo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//前置通知</span></span><br><span class=\"line\"><span class=\"comment\">//@Before 注解表示作为前置通知</span></span><br><span class=\"line\"><span class=\"meta\">@Before(value = &quot;pointdemo()&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;before.........&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-设置增强类优先级\"><a href=\"#6-设置增强类优先级\" class=\"headerlink\" title=\"6. 设置增强类优先级\"></a>6. 设置增强类优先级</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 有多个增强类多同一个方法进行增强，在增强类上面添加注解 @Order(数值)，数字类型值越小优先级越高</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Order(1)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonProxy</span></span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-完全使用注解开发\"><a href=\"#7-完全使用注解开发\" class=\"headerlink\" title=\"7. 完全使用注解开发\"></a>7. 完全使用注解开发</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建配置类，不需要创建 xml 配置文件 </span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(basePackages = &#123;&quot;com.spring.demo&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConfigAop</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五、基于XML配置文件实现AOP-操作\"><a href=\"#五、基于XML配置文件实现AOP-操作\" class=\"headerlink\" title=\"五、基于XML配置文件实现AOP 操作\"></a>五、基于XML配置文件实现AOP 操作</h1><p>​    了解即可，重点掌握基于注解的方式。</p>\n<h2 id=\"1-创建增强类、被增强类、方法\"><a href=\"#1-创建增强类、被增强类、方法\" class=\"headerlink\" title=\"1. 创建增强类、被增强类、方法\"></a>1. 创建增强类、被增强类、方法</h2><p>​    略</p>\n<h2 id=\"2-在-Spring-配置文件中创建对象\"><a href=\"#2-在-Spring-配置文件中创建对象\" class=\"headerlink\" title=\"2 在 Spring 配置文件中创建对象\"></a>2 在 Spring 配置文件中创建对象</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--创建对象--&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;book&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo02.Book&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bookProxy&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo02.BookProxy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-在-Spring-配置文件中配置切入点\"><a href=\"#3-在-Spring-配置文件中配置切入点\" class=\"headerlink\" title=\"3. 在 Spring 配置文件中配置切入点\"></a>3. 在 Spring 配置文件中配置切入点</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置 aop 增强--&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--切入点--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* com.spring.demo.demo02.Book.buy(..))&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--配置切面--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;bookProxy&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--增强作用在具体的方法上--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;before&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;p&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ul>\n<li><p><a href=\"https://www.bilibili.com/video/BV1Vf4y127N5?p=19&t=201\">尚硅谷-Spring5框架最新版教程（idea版）</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/weixin_45496190\">来点淦货的CSDN博客</a></p>\n</li>\n</ul>\n","categories":["Spring"],"tags":["Spring5","JdbcTemplate"]},{"title":"Spring5 框架学习（二）","url":"/2021/05/28/Spring5-%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/","content":"<h1 id=\"一、IOC简介\"><a href=\"#一、IOC简介\" class=\"headerlink\" title=\"一、IOC简介\"></a>一、IOC简介</h1><h2 id=\"1-什么是IOC（控制反转）\"><a href=\"#1-什么是IOC（控制反转）\" class=\"headerlink\" title=\"1. 什么是IOC（控制反转）\"></a>1. 什么是IOC（控制反转）</h2><p> a）把对象创建和对象之间的调用过程，交给Spring进行管理</p>\n<p> b）使用IOC目的：为了降低耦合度</p>\n<h2 id=\"2-IOC底层原理\"><a href=\"#2-IOC底层原理\" class=\"headerlink\" title=\"2. IOC底层原理\"></a>2. IOC底层原理</h2><p>​    xml解析、工厂模式、反射</p>\n<h2 id=\"3-Spring提供的IOC容器实现的两种方式（两个接口）\"><a href=\"#3-Spring提供的IOC容器实现的两种方式（两个接口）\" class=\"headerlink\" title=\"3. Spring提供的IOC容器实现的两种方式（两个接口）\"></a>3. Spring提供的IOC容器实现的两种方式（两个接口）</h2><p> a）BeanFactory接口：IOC容器基本实现是Spring内部接口的使用接口，不提供给开发人员进行使用（加载配置文件时候不会创建对象，在获取对象时才会创建对象。）</p>\n<p> b）ApplicationContext接口：BeanFactory接口的子接口，提供更多更强大的功能，提供给开发人员使用（加载配置文件时候就会把在配置文件对象进行创建）推荐使用ApplicationContext接口。</p>\n<h2 id=\"4-ApplicationContext接口有实现类\"><a href=\"#4-ApplicationContext接口有实现类\" class=\"headerlink\" title=\"4. ApplicationContext接口有实现类\"></a>4. ApplicationContext接口有实现类</h2><p><img src=\"https://cdn.jsdelivr.net/gh/xiaocaixiang/image/img/20210527184028.png\"></p>\n<h1 id=\"二、IOC操作-Bean管理\"><a href=\"#二、IOC操作-Bean管理\" class=\"headerlink\" title=\"二、IOC操作-Bean管理\"></a>二、IOC操作-Bean管理</h1><h2 id=\"1-什么是Bean管理\"><a href=\"#1-什么是Bean管理\" class=\"headerlink\" title=\"1. 什么是Bean管理\"></a>1. 什么是Bean管理</h2><p>​    Bean管理就是指两个操作：（1）Spring创建对象 （2）Spring注入属性</p>\n<h2 id=\"2-Bean管理操作的两种方式\"><a href=\"#2-Bean管理操作的两种方式\" class=\"headerlink\" title=\"2. Bean管理操作的两种方式\"></a>2. Bean管理操作的两种方式</h2><p> a）基于 xml 配置文件方式实现</p>\n<p> b）基于注解方式实现</p>\n<h1 id=\"三、基于XML配置文件的方式实现Bean管理\"><a href=\"#三、基于XML配置文件的方式实现Bean管理\" class=\"headerlink\" title=\"三、基于XML配置文件的方式实现Bean管理\"></a>三、基于XML配置文件的方式实现Bean管理</h1><h2 id=\"1-创建对象\"><a href=\"#1-创建对象\" class=\"headerlink\" title=\"1. 创建对象\"></a>1. 创建对象</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--1 配置User对象创建--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;user&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.User&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> a）在 spring 配置文件中，使用 bean 标签，标签里面添加对应属性，就可以实现对象创建</p>\n<p> b）在 bean 标签有很多属性，介绍常用的属性</p>\n<pre><code>     id 属性：唯一标识\n</code></pre>\n<p>​        class 属性：类全路径（包类路径）</p>\n<p> b）创建对象时候，默认是执行无参数构造方法完成对象创建</p>\n<h2 id=\"2-注入属性（DI：依赖注入）\"><a href=\"#2-注入属性（DI：依赖注入）\" class=\"headerlink\" title=\"2. 注入属性（DI：依赖注入）\"></a>2. 注入属性（DI：依赖注入）</h2><ul>\n<li><p>set方式注入</p>\n<p>​    a）创建类，定义属性和对应的 set 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//创建属性</span></span><br><span class=\"line\">     <span class=\"keyword\">private</span> String bname;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> String bauthor;</span><br><span class=\"line\">     <span class=\"comment\">//创建属性对应的 set 方法</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBname</span><span class=\"params\">(String bname)</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.bname = bname;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBauthor</span><span class=\"params\">(String bauthor)</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.bauthor = bauthor;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    b）在 spring 配置文件 配置对象创建，配置属性注入</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;book&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.Book&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!--使用 property 完成属性注入</span></span><br><span class=\"line\"><span class=\"comment\">     name：类里面属性名称</span></span><br><span class=\"line\"><span class=\"comment\">     value：向属性注入的值</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;bname&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;三体&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;bauthor&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;刘慈欣&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>有参构造函数注入</p>\n<p>​    a）创建类，定义属性，创建属性对应有参数构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Orders</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//属性</span></span><br><span class=\"line\">     <span class=\"keyword\">private</span> String oname;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> String address;</span><br><span class=\"line\">     <span class=\"comment\">//有参数构造</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Orders</span><span class=\"params\">(String oname,String address)</span> </span>&#123;</span><br><span class=\"line\">     \t <span class=\"keyword\">this</span>.oname = oname;</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.address = address;</span><br><span class=\"line\"> \t&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    b）在 spring 配置文件中进行配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;orders&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.Orders&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;oname&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;电脑&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;address&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;China&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>p名称空间注入</p>\n<p>​    添加 p 名称空间在配置文件中，使用 p 名称空间注入，可以简化基于 xml 配置方式</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\">       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;&lt;!--在这里添加一行p--&gt;</span><br><span class=\"line\">    &lt;bean id=&quot;book&quot; class=&quot;com.spring.demo.demo01.Book&quot; p:bname=三体 p:bauthor=&quot;刘慈欣&quot;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>注入空值和特殊符号</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;orders&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.Orders&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;address&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">null</span>/&gt;</span> <span class=\"comment\">&lt;!--属性里边添加一个null标签实现注入null--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--特殊符号注入有两种方式</span></span><br><span class=\"line\"><span class=\"comment\">       a 把&lt;&gt;进行转义 &amp;lt; &amp;gt;</span></span><br><span class=\"line\"><span class=\"comment\">       b 把带特殊符号内容写到CDATA里</span></span><br><span class=\"line\"><span class=\"comment\">      --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;address&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>注入外部 bean</p>\n<p>​    a）创建两个类：service类和dao类</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//service类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">//创建UserDao类型属性，生成set方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUserDao</span><span class=\"params\">(UserDao userDao)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.userDao = userDao;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;service add...............&quot;</span>);</span><br><span class=\"line\">        userDao.update();<span class=\"comment\">//调用dao方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//dao类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDao</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;dao update...........&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//dao接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n<p>​    b）在spring配置文件中进行配置</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 创建service和dao对象--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.UserService&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 注入userDao对象</span></span><br><span class=\"line\"><span class=\"comment\">         name属性：类里面属性名称</span></span><br><span class=\"line\"><span class=\"comment\">         ref属性：创建userDao对象bean标签id值</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;userDao&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;userDaoImpl&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userDaoImpl&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.UserDaoImpl&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>注入内部bean</p>\n<p> a）创建两个类：Dept类和Emp类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//部门类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dept</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dname;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDname</span><span class=\"params\">(String dname)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dname = dname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//员工类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Emp</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String ename;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String gender;</span><br><span class=\"line\">    <span class=\"comment\">//员工属于某一个部门，使用对象形式表示</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Dept dept;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDept</span><span class=\"params\">(Dept dept)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dept = dept;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEname</span><span class=\"params\">(String ename)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ename = ename;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setGender</span><span class=\"params\">(String gender)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.gender = gender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n<p>  b）在spring配置文件中进行配置</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--内部bean--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;emp&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.Emp&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--设置两个普通属性--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ename&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Andy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;女&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--设置对象类型属性--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dept&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dept&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.Dept&quot;</span>&gt;</span><span class=\"comment\">&lt;!--内部bean赋值--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dname&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;宣传部门&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>级联赋值</p>\n<p>① 可以直接在spring配置文件中进行配置实现级联赋值</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;emp&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.Emp&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--设置两个普通属性--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ename&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;lucy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;女&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--级联赋值--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dept&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;dept&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dept&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.Dept&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dname&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;财务部&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n<p>② 可以生成类的get方法后配置spring配置文件实现级联赋值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//生成dept的get方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Dept <span class=\"title\">getDept</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dept;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<pre><code><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--级联赋值--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;emp&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.Emp&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--设置两个普通属性--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ename&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jams&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;男&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--级联赋值--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dept&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;dept&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dept.dname&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;技术部门&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dept&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.Dept&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><p>注入集合普通属性</p>\n<p>注入数组类型、 List 集合类型、 Map 集合类型属性</p>\n<p>a ）创建Stu类：定义数组、list、map、set 类型属性，生成对应 set 方法</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stu</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1 数组类型属性</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] courses;</span><br><span class=\"line\">    <span class=\"comment\">//2 list集合类型属性</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; list;</span><br><span class=\"line\">    <span class=\"comment\">//3 map集合类型属性</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String,String&gt; maps;</span><br><span class=\"line\">    <span class=\"comment\">//4 set集合类型属性</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;String&gt; sets;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSets</span><span class=\"params\">(Set&lt;String&gt; sets)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sets = sets;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCourses</span><span class=\"params\">(String[] courses)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.courses = courses;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setList</span><span class=\"params\">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.list = list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMaps</span><span class=\"params\">(Map&lt;String, String&gt; maps)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.maps = maps;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n<p>b ）在 spring 配置文件进行配置</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;stu&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.Stu&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--数组类型属性注入--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;courses&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>java课程<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>数据库课程<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--list类型属性注入--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>小三<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--map类型属性注入--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;maps&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;JAVA&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;java&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">entry</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;PHP&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;php&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">entry</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--set类型属性注入--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sets&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>MySQL<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>Redis<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>注入集合对象属性</p>\n<p>a）创建Course类</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//学生所学多门课程</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> List&lt;Course&gt; courseList;<span class=\"comment\">//创建集合</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCourseList</span><span class=\"params\">(List&lt;Course&gt; courseList)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.courseList = courseList;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>b）在 spring 配置文件进行配置</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--创建多个course对象--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;course1&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.Course&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;cname&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Spring5框架&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;course2&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.Course&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;cname&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;MyBatis框架&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--注入list集合类型，值是对象--&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;courseList&quot;</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">&quot;course1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ref</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">&quot;course2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ref</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>提取集合的注入部分</p>\n<p>a）添加 util名称空间在配置文件中</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:p</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:util</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                           http://www.springframework.org/schema/util </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                           http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>b）使用 util 标签完成 list 集合注入提取</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 提取 list 集合类型属性注入--&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">util:list</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bookList&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>book1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>book2<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>book3<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">util:list</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 提取 list 集合类型属性注入使用--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;book&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.Book&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;list&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;bookList&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"3-Bean类型\"><a href=\"#3-Bean类型\" class=\"headerlink\" title=\"3. Bean类型\"></a>3. Bean类型</h2><p>Spring 有两种类型 bean，一种普通 bean，另外一种工厂 bean（FactoryBean）</p>\n<ul>\n<li><p>普通 bean：在配置文件中定义 bean 类型就是返回类型</p>\n</li>\n<li><p>工厂 bean：在配置文件定义 bean 类型可以和返回类型不一样</p>\n<p>a）创建类，让这个类作为工厂 bean，实现接口 FactoryBean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBean</span> <span class=\"keyword\">implements</span> <span class=\"title\">FactoryBean</span>&lt;<span class=\"title\">Course</span>&gt; </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//定义返回 bean</span></span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> Course <span class=\"title\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">         Course course = <span class=\"keyword\">new</span> Course();</span><br><span class=\"line\">         course.setCname(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">return</span> course;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">     <span class=\"keyword\">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSingleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     \t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>b）实现接口里面的方法，在实现的方法中定义返回的 bean 类型</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.MyBean&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     ApplicationContext context =</span><br><span class=\"line\">     <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">&quot;bean3.xml&quot;</span>);</span><br><span class=\"line\">     Course course = context.getBean(<span class=\"string\">&quot;myBean&quot;</span>, Course.class);</span><br><span class=\"line\">     System.out.println(course);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"4-Bean作用域\"><a href=\"#4-Bean作用域\" class=\"headerlink\" title=\"4. Bean作用域\"></a>4. Bean作用域</h2><p>在Spring 里面，设置创建 bean 实例是单实例还是多实。默认情况下，bean是单实例对象。</p>\n<p>Spring 配置文件 bean 标签里面的属性（scope）用于设置单实例还是多实例。</p>\n<p>scope 属性默认值为：<strong>singleton</strong>，表示是单实例对象。可以设置值为： <strong>prototype</strong>，表示多实例对象。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;book&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.Book&quot;</span> <span class=\"attr\">scope</span>=<span class=\"string\">&quot;prototype&quot;</span>&gt;</span><span class=\"comment\">&lt;!--设置为多实例--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;list&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;bookList&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>singleton 和 prototype 的区别：</p>\n<p> a）singleton 单实例，prototype 多实例</p>\n<p> b）设置 scope 值为 singleton ，加载 spring 配置文件时候就会创建单实例对象 ；设置 scope 值为prototype ，不是在加载 spring 配置文件时候创建对象，而是在调用 getBean 方法时候创建多实例对象。</p>\n<h2 id=\"5-Bean生命周期\"><a href=\"#5-Bean生命周期\" class=\"headerlink\" title=\"5. Bean生命周期\"></a>5. Bean生命周期</h2><p>a）生命周期概念：从对象创建到对象销毁的过程</p>\n<p>b）bean 生命周期：</p>\n<pre><code> （1）通过构造器创建 bean 实例（无参数构造）\n \n （2）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）\n \n （3）调用 bean 的初始化的方法（需要进行配置初始化的方法）\n</code></pre>\n<p>​     （4）bean 可以使用了（对象获取到了）</p>\n<pre><code> （5）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）\n</code></pre>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Orders</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//无参数构造</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Orders</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;第一步 执行无参数构造创建 bean 实例&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String oname;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOname</span><span class=\"params\">(String oname)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.oname = oname;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;第二步 调用 set 方法设置属性值&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//创建执行的初始化的方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;第三步 执行初始化的方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//创建执行的销毁的方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroyMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;第五步 执行销毁的方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBeanPost</span> <span class=\"keyword\">implements</span> <span class=\"title\">BeanPostProcessor</span> </span>&#123;<span class=\"comment\">//创建后置处理器实现类</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;在初始化之前执行的方法&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessAfterInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;在初始化之后执行的方法&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置文件的bean参数配置--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;orders&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.Orders&quot;</span> <span class=\"attr\">init-method</span>=<span class=\"string\">&quot;initMethod&quot;</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">&quot;destroyMethod&quot;</span>&gt;</span>\t<span class=\"comment\">&lt;!--配置初始化方法和销毁方法--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;oname&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;手机&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span><span class=\"comment\">&lt;!--这里就是通过set方式（注入属性）赋值--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--配置后置处理器--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myBeanPost&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.MyBeanPost&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testBean3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ApplicationContext context =</span></span><br><span class=\"line\">    <span class=\"comment\">// new ClassPathXmlApplicationContext(&quot;bean4.xml&quot;);</span></span><br><span class=\"line\">    ClassPathXmlApplicationContext context =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">&quot;bean4.xml&quot;</span>);</span><br><span class=\"line\">    Orders orders = context.getBean(<span class=\"string\">&quot;orders&quot;</span>, Orders.class);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;第四步 获取创建 bean 实例对象&quot;</span>);</span><br><span class=\"line\">    System.out.println(orders);</span><br><span class=\"line\">    <span class=\"comment\">//手动让 bean 实例销毁</span></span><br><span class=\"line\">    context.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>c）bean正常生命周期为五步，在配置后置处理器后为七步</p>\n<p> （1）通过构造器创建 bean 实例（无参数构造）</p>\n<p> （2）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</p>\n<p> （3）把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization</p>\n<p> （4）调用 bean 的初始化的方法（需要进行配置初始化的方法）</p>\n<p> （5）把 bean 实例传递 bean 后置处理器的方法 postProcessAfterInitialization</p>\n<p> （6）bean 可以使用了（对象获取到了）</p>\n<p> （7）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</p>\n<h2 id=\"6-自动装配\"><a href=\"#6-自动装配\" class=\"headerlink\" title=\"6. 自动装配\"></a>6. 自动装配</h2><p>a）概念：根据指定装配规则（属性名称或者属性类型），Spring 自动将匹配的属性值进行注入</p>\n<p>b）自动装配过程</p>\n<ul>\n<li><p>根据属性名称自动注入</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--实现自动装配</span></span><br><span class=\"line\"><span class=\"comment\"> bean 标签属性 autowire，配置自动装配</span></span><br><span class=\"line\"><span class=\"comment\"> autowire 属性常用两个值：</span></span><br><span class=\"line\"><span class=\"comment\"> byName 根据属性名称注入 ，注入值 bean 的 id 值和类属性名称一样</span></span><br><span class=\"line\"><span class=\"comment\"> byType 根据属性类型注入</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;emp&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.Emp&quot;</span> <span class=\"attr\">autowire</span>=<span class=\"string\">&quot;byName&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dept&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.Dept&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>根据属性类型自动注入</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--实现自动装配</span></span><br><span class=\"line\"><span class=\"comment\"> bean 标签属性 autowire，配置自动装配</span></span><br><span class=\"line\"><span class=\"comment\"> autowire 属性常用两个值：</span></span><br><span class=\"line\"><span class=\"comment\"> byName 根据属性名称注入 ，注入值 bean 的 id 值和类属性名称一样</span></span><br><span class=\"line\"><span class=\"comment\"> byType 根据属性类型注入</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;emp&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.Emp&quot;</span> <span class=\"attr\">autowire</span>=<span class=\"string\">&quot;byType&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dept&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.spring.demo.demo01.Dept&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"7-外部属性文件\"><a href=\"#7-外部属性文件\" class=\"headerlink\" title=\"7. 外部属性文件\"></a>7. 外部属性文件</h2><ul>\n<li><p>直接配置数据库信息 </p>\n<p>a）配置Druid（德鲁伊）连接池 </p>\n<p>b）引入Druid（德鲁伊）连接池依赖 jar 包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--直接配置连接池--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClassName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/userDb&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>引入外部属性文件配置数据库连接池</p>\n<p>a）创建外部属性文件，properties 格式文件，写数据库信息（<strong>jdbc.properties</strong>）</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">prop.driverClass</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"meta\">prop.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/userDb</span></span><br><span class=\"line\"><span class=\"meta\">prop.userName</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">prop.password</span>=<span class=\"string\">root</span></span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n<p>b）把外部 properties 属性文件引入到 spring 配置文件中 —— 引入 context 名称空间</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                           http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                           http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span> <span class=\"comment\">&lt;!--引入context名称空间--&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"comment\">&lt;!--引入外部属性文件--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--配置连接池--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClassName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;prop.driverClass&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;prop.url&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;prop.userName&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;prop.password&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"四、基于注解的方式实现Bean管理\"><a href=\"#四、基于注解的方式实现Bean管理\" class=\"headerlink\" title=\"四、基于注解的方式实现Bean管理\"></a>四、基于注解的方式实现Bean管理</h1><h2 id=\"1-Spring-注解\"><a href=\"#1-Spring-注解\" class=\"headerlink\" title=\"1. Spring 注解\"></a>1. Spring 注解</h2><p> （1）注解是代码特殊标记，格式：@注解名称(属性名称=属性值, 属性名称=属性值…)</p>\n<p> （2）使用注解，注解作用在类上面，方法上面，属性上面</p>\n<p> （3）使用注解目的：简化 xml 配置</p>\n<h2 id=\"2-Spring-针对-Bean-管理中创建对象提供注解\"><a href=\"#2-Spring-针对-Bean-管理中创建对象提供注解\" class=\"headerlink\" title=\"2. Spring 针对 Bean 管理中创建对象提供注解\"></a>2. Spring 针对 Bean 管理中创建对象提供注解</h2><p> 下面四个注解功能是一样的，都可以用来创建 bean 实例</p>\n<p> （1）@Component</p>\n<p> （2）@Service</p>\n<p> （3）@Controller</p>\n<p> （4）@Repository</p>\n<h2 id=\"3-基于注解方式实现对象创建\"><a href=\"#3-基于注解方式实现对象创建\" class=\"headerlink\" title=\"3. 基于注解方式实现对象创建\"></a>3. 基于注解方式实现对象创建</h2><p>a） 引入依赖 （引入<strong>spring-aop jar包</strong>）</p>\n<p>b）启组件扫描</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--开启组件扫描</span></span><br><span class=\"line\"><span class=\"comment\"> 1 如果扫描多个包，多个包使用逗号隔开</span></span><br><span class=\"line\"><span class=\"comment\"> 2 扫描包上层目录</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.spring.demo&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>c） 创建类，在类上面添加创建对象注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在注解里面 value 属性值可以省略不写，默认值是类名称首字母小写（UserService -- userService）</span></span><br><span class=\"line\"><span class=\"meta\">@Component(value = &quot;userService&quot;)</span> <span class=\"comment\">//注解等同于XML配置文件：&lt;bean id=&quot;userService&quot; class=&quot;..&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;service add.......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-开启组件扫描细节配置\"><a href=\"#4-开启组件扫描细节配置\" class=\"headerlink\" title=\"4. 开启组件扫描细节配置\"></a>4. 开启组件扫描细节配置</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--示例 1</span></span><br><span class=\"line\"><span class=\"comment\">     use-default-filters=&quot;false&quot; 表示现在不使用默认 filter，自己配置 filter</span></span><br><span class=\"line\"><span class=\"comment\">     context:include-filter ，设置扫描哪些内容</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.spring.demo&quot;</span> <span class=\"attr\">use-default-filters</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context:include-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;annotation&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">                                <span class=\"attr\">expression</span>=<span class=\"string\">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--示例 2</span></span><br><span class=\"line\"><span class=\"comment\">     下面配置扫描包所有内容</span></span><br><span class=\"line\"><span class=\"comment\">     context:exclude-filter： 设置哪些内容不进行扫描</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.spring.demo&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context:exclude-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;annotation&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">                                <span class=\"attr\">expression</span>=<span class=\"string\">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-基于注解方式实现属性注入\"><a href=\"#5-基于注解方式实现属性注入\" class=\"headerlink\" title=\"5. 基于注解方式实现属性注入\"></a>5. 基于注解方式实现属性注入</h2><ul>\n<li><p>@Autowired：根据属性类型进行自动装配</p>\n<p>a） 把 service 和 dao 对象创建，在 service 和 dao 类添加创建对象注解</p>\n<p>b）在 service 注入 dao 对象，在 service 类添加 dao 类型属性，在属性上面使用注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义 dao 类型属性</span></span><br><span class=\"line\">    <span class=\"comment\">//不需要添加 set 方法</span></span><br><span class=\"line\">    <span class=\"comment\">//添加注入属性注解</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;service add.......&quot;</span>);</span><br><span class=\"line\">        userDao.add();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Dao实现类</span></span><br><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"comment\">//@Repository(value = &quot;userDaoImpl1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;dao add.....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>@Qualifier：根据名称进行注入。@Qualifier 注解，需要和上面@Autowired 一起使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义 dao 类型属性</span></span><br><span class=\"line\"><span class=\"comment\">//不需要添加 set 方法</span></span><br><span class=\"line\"><span class=\"comment\">//添加注入属性注解</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span> <span class=\"comment\">//根据类型进行注入</span></span><br><span class=\"line\"><span class=\"comment\">//根据名称进行注入（目的在于区别同一接口下有多个实现类，根据类型就无法选择，从而出错！）</span></span><br><span class=\"line\"><span class=\"meta\">@Qualifier(value = &quot;userDaoImpl1&quot;)</span> </span><br><span class=\"line\"><span class=\"keyword\">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure></li>\n<li><p>@Resource：可以根据类型注入，也可以根据名称注入（它属于javax包下的注解，不推荐使用！）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//@Resource //根据类型进行注入</span></span><br><span class=\"line\"><span class=\"meta\">@Resource(name = &quot;userDaoImpl1&quot;)</span> <span class=\"comment\">//根据名称进行注入</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure></li>\n<li><p>@Value：注入普通类型属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Value(value = &quot;abc&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String name</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"6-完全注解开发\"><a href=\"#6-完全注解开发\" class=\"headerlink\" title=\"6. 完全注解开发\"></a>6. 完全注解开发</h2><p>a）创建配置类，替代 xml 配置文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span> <span class=\"comment\">//作为配置类，替代 xml 配置文件</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(basePackages = &#123;&quot;com.spring.demo&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringConfig</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>b）编写测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testService2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//加载配置类</span></span><br><span class=\"line\">    ApplicationContext context</span><br><span class=\"line\">        = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class=\"line\">    UserService userService = context.getBean(<span class=\"string\">&quot;userService&quot;</span>,UserService.class);</span><br><span class=\"line\">    System.out.println(userService);</span><br><span class=\"line\">    userService.add();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ul>\n<li><p><a href=\"https://www.bilibili.com/video/BV1Vf4y127N5?p=19&t=201\">尚硅谷-Spring5框架最新版教程（idea版）</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/weixin_45496190\">来点淦货的CSDN博客</a></p>\n</li>\n</ul>\n","categories":["Spring"],"tags":["Spring5","IOC","Bean","XML"]}]